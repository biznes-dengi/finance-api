Goal (иерархия слоев для cohesion)
    1. types - типы, которые будут переиспользоваться во всем проекте (по иерархии слоев)
    2. api (оч редко, на уровне shared держим апи) - низкий уровень (DAL в рамках сущности) - коммуникация с api через httpClient
    3. model - server state (BLL в рамках сущности) - логика компонентов (reducers, логика на хуках - что угодно, без зависимости от стэка)
    4. configs - button config
    5. helpers - lib/utils - getTableHeaders() / mapApiDataToClientData
    5. ui - группировка компонентов, чтобы не было кросс импортов в /shared (Card + Button = EntityCard, специфический компонент)


В рамках модуля Goal возможны кросс-импорты между модулями (@entity/goal/api -> @entity/goal/model)
    cohesion (связанность) - внутренняя связанность модуля (через кросс-импорты)
    coupling (зацепленность) - внешняя связь между модулями (через public api)

--

Что касается домена, я хочу, чтобы я просто взял вырезал с этого проекта, вставил в другой, и все заработало.
И ненадо бегать по всему проекту собирать разманные модули (конфиги, экшены, компоненты, а каждый компонент тянет
новый конфиг и тд)

--

/enities/goal
    /model
        useGoalData
            Вырать степень абстракции
            1. useGoalData() = useFetch(queryConfig) + imports from api (+ specificQueries, to extend useFetch)
            2. useGoalData() = react-query + imports from api